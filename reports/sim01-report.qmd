---
title: Bayesian adaptive trial in RSV
subtitle: Simulation Report
description: |
    Pragmatic, observer-blinded, randomised controlled clinical trial of a dose of nirsevimab, versus standard care, from six months old to reduce medically attended LRIs among First Nations infants in the NT.
date: last-modified
date-format: "D MMMM YYYY"
author: 
  - name: Mark Jones
    id: mj
    email: mark.jones1@sydney.edu.au
version: 0.1
sponsor: University of Newcastle, NSW, Australia
protocol-number: Version 1.1  01AUG2024
registration: todo
hrec: todo
ci1: Bianca Middleton
editor: source
bibliography: ../etc/refs.bib
csl: ../etc/elsevier-harvard.csl
# number-sections required otherwise section refs will not render 
number-sections: true
toc: true
toc-depth: 3
format:
  pdf: 
    pdf-engine: xelatex
    keep-tex: true
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    mainfont: Libertinus Serif
    sansfont: Libertinus Sans
    monofont: Libertinus Mono
    mathfont: Libertinus Math
    linestretch: 1.25
    template-partials: 
      - "../_extensions/partials/before-body.tex"
    include-in-header:
      text: |
       \usepackage{physics}
       \setkomafont{chapter}{\fontsize{16}{18}\selectfont}
       \setkomafont{section}{\fontsize{14}{16}\selectfont}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE
)
```

```{r}
#| echo: false

# uml digs
suppressPackageStartupMessages(library(nomnoml))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(qs))
suppressPackageStartupMessages(library(git2r))
suppressPackageStartupMessages(suppressWarnings(library(gt)))
suppressPackageStartupMessages(library(ggh4x))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(scales))

toks <- unlist(tstrsplit(getwd(), "/")) 
if(toks[length(toks)] == "rsv-sim"){
  prefix_cfg <- "./etc/sim01/"
  prefix_stan <- "./stan"
  prefix_fig <- "./fig"
  prefix_data <- "./data"
} else {
  prefix_cfg <- "../etc/sim01/"
  prefix_stan <- "../stan"
  prefix_fig <- "../fig"
  prefix_data <- "../data"
}

# Each input file corresponds to the results from a single simulation
# scenario/configuration.
# Load all the files into a single list.

# files of interest
sim_lab <- "sim01-01"

flist <- list.files(paste0(prefix_data, "/", sim_lab), pattern = "sim01")
toks <- list()
l <- list()
i <- 1

for(i in 1:length(flist)){

  l[[i]] <- qs::qread(file.path(paste0(prefix_data, "/", sim_lab), flist[i]))
  toks[[i]] <-  unlist(tstrsplit(flist[i], "[-.]"))
}

N_sims <- l[[1]]$cfg$nsim
```

{{< pagebreak >}}

::: summary
|     |        |
|:----|:------------|
|Study title:  |  todo |
|Intervention: |  Single IM dose of 50mg in 0.5mL nirsevimab (100mg for infants > 5kg), or standard care. |   
|Outcome: |  Any occurrence of medically attended RSV-LRI (RSV-LRI) in the 6 months after randomisation |   
|Study design:  |   Bayesian adaptive trial with early stopping rules | 
|Sponsor:  |    todo | 
Protocol: |  todo |
|Registration:  |    todo | 
|HREC:  |   todo | 
|Study date of first consent:  |   todo | 
|Principal coordinating investigators:  |   Bianca Middleton | 
:::

<!-- 
Note that the above relies on the pandoc extension implemented in the lua file 
in the etc directory. It additionally relies on the presence of a custom style
in word called study summary. It will currently only work for word (because I
cannot be bothered to implement it in anything else at the moment).
-->


{{< pagebreak >}}

# Version history {.unlisted .unnumbered}

| Version    |   Date     | Change    |   Reason     |
|:----|:------------|:----|:------------|
| 0.1 | 2025-06-27 | First version | N/A |


{{< pagebreak >}}



# Introduction

This report documents the simulation approach and results for the operating characteristics for the RSV study.
The report is an operational document that will be updated, as necessary, over the course of the study.
It should be read in conjunction with the relevant version of the statistical analysis plan.

We provide the data generation assumptions, modelling approaches, scenarios and results that were used to explore the design.

 These results are based on simulation ``r sim_lab`` with ``r N_sims`` simulated trials run per scenario.

# Data generation

Data is generated based on subject matter expertise and while necessarily a simplification of reality, it aims to capture the aspects that are essential to the design.
The distributional assumptions of each data component follows.

We simulate design variables for region, locality and treatment assignment.

Regional allocation is based on a multinomial distribution with two levels with the probability of residing in Alice set to 0.6.
Conditional on regional allocation, locality (urban or remote) is simulated based on a multinomial distribution with two levels.
The probability of remote status given residence in Alice is set to 0.45 and the probability of remote status given residence in Darwin is set to 0.65.
The above values were arbitrary.

Within each region/locality combination we allocated treatment status to intervention vs soc with a 1:1 ratio.

Occurrence of medically attended RSV-LRI in the 6 months after randomisation is simulated as a bernoulli random variable with probability formed from a linear risk model.
While it is possible that participants will have one or more occurrences of medically attended RSV-LRI in the 6 months after randomisation, we adopt the binary perspective of any occurrence versus none.

The participant characteristics and their outcome variables are generated at the start of each interim analysis so that the data accrues sequentially for the analyses.
As the trial progresses, decisions may be made which lead to early stopping of treatment arms.
Given the study has only two arms, early stopping of an arm would lead to the termination of the trial.

To speed up parameter estimation, we aggregate the number of successes and number of trials by covariate group and this gives the analogous binomial random variable representation.

# Modelling {#sec-modelling}

While the data are simulated using a linear risk model, the simulation model is specified as a multivariable logistic regression model from which we subsequently transform the parameters back to the risk scale via the inverse link and a g-computation step.
The model form is:

$$
\begin{aligned}
y &\sim \text{Binomial}(\pi, n) \\
\text{logit}(\pi)  &=  \alpha + \beta_{[\text{reg}]} + \gamma_{[\text{loc}]} +  \delta_{[\text{trt}]}  \\
\end{aligned}
$$

where $y$ is a binomial variable for the number of events out of $n$ trials for a distinct covariate pattern occurring with probability $\pi$ calculated from the linear predictor as follows:

+ $\alpha$ reference level log-odds of a successful outcome
+	$\beta_j$ effect of region (alice, darwin)
+	$\gamma_k$ effect of locality (urban, remote)
+	$\delta_l$ effect of treatment (soc, intervention)

In practice, the log-odds of RSV-LRI may be differential for locality status within each region, but this has been ignored for now and no interactions are included.

# Decision procedures

Decision procedures, including thresholds and decision probabilities, follow those that are documented in the SAP.

At each interim, we assess the posterior and if a decision threshold is met then we will stop recruitment for superiority of futility.
The decisions are constructed as a static rule of the form $\text{Pr}(RD < \epsilon | y) > \zeta$ where $\epsilon$ and $\zeta$ are pre-specified values corresponding to a clinical meaningful difference and an evidentiary requirement in terms of probability. 
This approach is based on the current data and are interpreted with reference to the current available evidence.
This approach is simple and offers a transparent interpretation but it ignores the possibility that accumulating data may shift the posterior.

# Scenarios

Each scenario adopts a maximum sample size of 1000 with interim analyses run after 400 enrolments have reached their primary endpoint and every 200 thereafter.
Given the use of a linear risk model in the data generation process, the treatment effects were specified as risk differences.

All scenarios used fixed covariate distributions and effects over the duration of the study. 
Additionally, all simulations used the same reference values and decision thresholds.

```{r, echo = F, eval = T}
#| label: scenario_list
#| code-summary: Scenarios

# Cumulative probability of decisions:

# Traverse the list of simulation results and for each one summarise the 
# cumulative probability of each decision type.

i <- 1
d_scenarios <- data.table()

# For each scenario that was simulated
for(i in 1:length(l)){
  l_cfg <- copy(l[[i]]$cfg)
  
  btrt <- unlist(l_cfg$btrt)
  
  d_scenarios <- rbind(
    d_scenarios,
    data.table(
      id = i,
      desc = l_cfg$desc,
      rd = btrt[2] - btrt[1]
    )
  )
}


```

```{r, eval = T}
#| echo: FALSE
#| label: tbl-scenarios
#| tbl-pos: H
#| tbl-cap: "Simulation scenarios"

gt_tbl <- gt(d_scenarios) |>
  cols_width(
    id ~ pct(10),
    desc ~ pct(50),
    rd ~ pct(40)
  ) |>
  cols_align(
    columns = 1:2,
    align = "left"
  ) |>
  cols_align(
    columns = 3,
    align = "center"
  )  |>
  cols_label(
    id = "ID",
    desc = "Scenario",
    rd = "Effect size (risk difference)"
  ) |>
  tab_options(
    table.width = pct(80),
    container.width = pct(80),
    table.font.size = pct(65)) 

gt_tbl 
```


```{r, echo = F, eval = T}
#| label: risk-grid
#| code-summary: Strata-level risk

# Cumulative probability of decisions:

# Traverse the list of simulation results and for each one summarise the 
# cumulative probability of each decision type.

i <- 1
d_grid_all <- data.table()

d_grid <- CJ(
  reg = 1:2,
  loc = 1:2,
  trt = 1:2,
  rd_trt = NA_real_
)



# For each scenario that was simulated
for(i in 1:length(l)){
  l_cfg <- copy(l[[i]]$cfg)
  
  alpha <- l_cfg$bmu
  b_reg <- unlist(l_cfg$breg)
  b_loc <- unlist(l_cfg$bloc)
  b_trt <- unlist(l_cfg$btrt)
  
  d_grid[, p := alpha + b_reg[reg] + b_loc[loc] + b_trt[trt]]
  
  d_grid[, rd_trt := b_trt[2] - b_trt[1]]
  
  d_grid_all <- rbind(
    d_grid_all,
    data.table(
      id = i,
      desc = l_cfg$desc,
      rd_trt = d_grid$rd_trt,
      reg = d_grid$reg,
      loc = d_grid$loc,
      trt = d_grid$trt,
      p = d_grid$p
    )
  )
}


```


```{r, echo = F}
#| label: fig-strata-risk
#| fig-cap: 'Underlying (true) probability of RSV-LRI by strata'
#| fig-height: 6
#| fig-width: 6
#| fig-pos: H



d_fig <- copy(d_grid_all)
d_fig[, trt := factor(trt, levels = 1:2, labels = c("Soc", "Trt"))]
# d_tbl_1_cur <- dcast(d_tbl_1_cur, id + desc ~ reg + loc + trt, value.var = "p")

d_fig[, desc := sprintf("%s (RD = %.3f)", desc, rd_trt)]

d_fig[, reg := factor(reg, levels = 1:2, labels = c("Alice", "Darwin"))]
d_fig[, loc := factor(loc, levels = 1:2, labels = c("Urban", "Remote"))]

ggplot(d_fig, aes(x = trt, y = p)) +
  geom_col(width = 0.1, fill = "grey") +
  geom_hline(aes(yintercept = p, lty = trt), lwd = 0.2) +
  # scale_color_discrete("") +
  scale_linetype_discrete("") +
  # scale_color_manual("", values = c("black", "red")) +
  scale_x_discrete("") +
  scale_y_continuous("Pr(RSV-LRI)", breaks = seq(0, 3, by = 0.05)) + 
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.box="horizontal",
    strip.text.y.right = element_text(angle = 0,
                                      hjust = 0,
                                      vjust = 0.2,
                                      size = 7),
    axis.ticks = element_blank(),
    strip.text.x.top = element_text(size = 7),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "grey",
                                  linewidth = 0.1,
                                  linetype = 1),
    axis.title.y=element_text(size = 7),
    axis.text.y = element_text(size = 7),
    axis.text.x = element_text(size = 7),
    axis.title.x = element_text(size = 7),
    legend.text = element_text(size = 7)
  ) +
  facet_grid2(
    desc ~ reg + loc, 
    axes = "y",
    labeller = label_wrap_gen(20)) 
```


# Results




## Probability of triggering decisions

@tbl-cprob-decision provides the cumulative probability of superiority by scenario with the probability of declaring futility in parentheses.
@fig-cprob-decision gives a visual representation of the same data.

```{r, echo = F, eval = T}
#| label: cum_prob_dec
#| code-summary: Cumulative probability of each decision type

# Cumulative probability of decisions:

# Traverse the list of simulation results and for each one summarise the 
# cumulative probability of each decision type.

i <- 1
d_cprob_dec <- data.table()

# For each scenario that was simulated
for(i in 1:length(l)){
  
  # extract the decision matrix - sim, analysis, quantity, domain level decision
  d_dec_1 <- copy(l[[i]]$d_decision)
  # config for scenario
  l_cfg <- copy(l[[i]]$cfg)
  
  # number of enrolments at each interim (interim sample size sequence)
  d_N <- data.table(ia = seq_along(l_cfg$N_pt), N = cumsum(l_cfg$N_pt))
  
  
  
  
  # compute the cumulative instances of a decision being made by sim, each 
  # decision type and by parameter
  d_dec_1[, value := as.logical(cumsum(value)>0), keyby = .(sim, quant)]
  d_dec_1 <- merge(d_dec_1, d_N, by = "ia")
  # cumulative proportion for which each decision quantity has been met by 
  # analysis and domain
  d_dec_cumprob <- d_dec_1[, .(pr_val = mean(value)), keyby = .(ia, N, quant)]
  
  b_trt <- unlist(l_cfg$btrt)
  d_cprob_dec <- rbind(
    d_cprob_dec,
    cbind(scenario = i, desc = l_cfg$desc, rd_trt = b_trt[2] - b_trt[1], d_dec_cumprob)
  )

}
```


```{r, eval = T}
#| echo: FALSE
#| label: tbl-cprob-decision
#| tbl-cap: 'Cumulative probability of decision at each interim'
#| tbl-pos: H



d_tbl_1_cur <- copy(d_cprob_dec)
d_tbl_1_cur <- dcast(
  d_tbl_1_cur, scenario + desc + rd_trt ~ quant + N, value.var = "pr_val")


setcolorder(d_tbl_1_cur, c("scenario", "desc", "rd_trt"))
setorderv(d_tbl_1_cur, cols = c("scenario"))

d_tbl_1_cur <- d_tbl_1_cur[, .SD, .SDcols = !c("scenario")]

g_tbl <- d_tbl_1_cur |> 
  gt(groupname_col = "desc") |> 
  gt::text_transform(
    locations = cells_row_groups(),
    fn = function(x) {
      lapply(x, function(x) {
        gt::md(paste0("*", x, "*"))
      })
    }
  ) |>
  cols_align(
    columns = 1:2,
    align = "left"
  )  |> 
  cols_align(
    columns = 3:ncol(d_tbl_1_cur),
    align = "center"
  )  |> 
  cols_merge(
    columns = c("sup_400", "fut_400"
                ),
    pattern = "<<{1}>><< ({2})>>"
  )   |> 
  cols_merge(
    columns = c("sup_600", "fut_600"
                ),
    pattern = "<<{1}>><< ({2})>>"
  ) |> 
  cols_merge(
    columns = c("sup_800", "fut_800"
                ),
    pattern = "<<{1}>><< ({2})>>"
  )  |> 
  cols_merge(
    columns = c("sup_1000", "fut_1000"
                ),
    pattern = "<<{1}>><< ({2})>>"
  )   |>
  cols_width(
    starts_with("sup") ~ px(90)
  ) |>
  tab_spanner(
    label = md("Enrolments having reached primary endpoint"),
    columns = 3:ncol(d_tbl_1_cur)
  )  |>
  cols_label(
    rd_trt = "Effect size (risk diff)",
    sup_400 = html("400"),
    sup_600 = html("600"),
    sup_800 = html("800"),
    sup_1000 = html("1000")
  ) |>
  tab_options(
    table.font.size = pct(65),
    latex.use_longtable = TRUE,
    latex.header_repeat = TRUE 
  ) |>
  fmt_number(decimals = 3, drop_trailing_zeros = TRUE)

g_tbl
```


```{r, echo = F}
#| label: fig-cprob-decision
#| fig-cap: 'Cumulative probability of decision at each interim (enrolment by interim)'
#| fig-height: 7
#| fig-width: 7
#| fig-pos: H


d_fig_1 <- copy(d_cprob_dec)

d_fig_1[, `:=`(
  rd_trt = factor(rd_trt, levels = sort(d_scenarios$rd, decreasing = T)    ))]

d_fig_1[, quant := factor(
  quant, levels = c("sup", "fut"), labels = c("Superiority", "Futility"))]

d_fig_1[, desc := factor(
  desc, 
  levels = c(
    "Null scenario", 
    "Treatment reduces chance of RSV-LRI",
    "Treatment increases chance of RSV-LRI"
    )
)]

ggplot(d_fig_1, aes(x = N, y = pr_val, group = quant, col = quant, lty = quant)) +
  geom_line(lwd = 0.25) +
  # scale_color_discrete("") +
  scale_linetype_manual("", values = c("solid", "dashed")) +
  scale_color_manual("", values = c("black", "red")) +
  scale_x_continuous("Enrolment") +
  scale_y_continuous("Pr(decision)", breaks = seq(0, 1, by = 0.1)) +
  facet_wrap2(desc ~ paste0("RD = ", rd_trt) ) + 
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.box="horizontal",
    strip.text.y.right = element_text(angle = 0,
                                      hjust = 0,
                                      vjust = 0.2,
                                      size = 7),
    axis.ticks = element_blank(),
    strip.text.x.top = element_text(size = 7),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "grey",
                                  linewidth = 0.1,
                                  linetype = 1),
    axis.title.y=element_text(size = 7),
    axis.text.y = element_text(size = 7), 
    axis.text.x = element_text(size = 7), 
    axis.title.x = element_text(size = 7),
    legend.text = element_text(size = 7)
  )
  
```


## Sample size

### Randomised comparisons

@tbl-n-at-trigger shows the expected number of participants on each treatment for each decision type by scenarios.

```{r, echo = F, eval = T}
#| label: random_cmp_size
#| code-summary: Expected sample size of randomised comparisons by decision

# 

i <- 1
d_N_by_rand <- data.table()

for(i in 1:length(l)){
  
  # extract the decision matrix - sim, analysis, quantity, domain level decision
  d_dec_1 <- copy(l[[i]]$d_decision)
  # config for scenario
  l_cfg <- copy(l[[i]]$cfg)
  
  b_trt <- unlist(l_cfg$btrt)
  rd_trt <- b_trt[2] - b_trt[1]
  # interim looks
  d_enrolment <- data.table(ia = seq_along(l_cfg$N_pt), N_enrol = cumsum(l_cfg$N_pt))
  # observed trial data sets
  d_all <- copy(l[[i]]$d_all)
  
  
  d_n_trt <- d_all[, .(N = sum(N)), keyby = .(sim, ia, trt)]
  d_n_trt[, N := cumsum(N), keyby = .(sim, trt)]
  
  
  # first decision triggered by simulation for domain 1
  d_trt_dec <- base::merge(
    d_dec_1[quant == "sup", .(sim, ia, sup = value)],
    d_dec_1[quant == "fut", .(sim, ia, fut = value)],
    by = c("sim", "ia")
  )
  d_trt_dec[sup == T & fut == F, decision := "sup"]
  d_trt_dec[sup == F & fut == T, decision := "fut"]
  # those with a decision, irrespective of sup/fut
  d_trt_dec_a <- d_trt_dec[
    decision %in% c("sup", "fut"), .SD[1], keyby = .(sim)][
    , .(sim, ia, decision)
  ]
  # those trials without a decision (run to the max sample size)
  d_trt_dec_b <- d_trt_dec[
    !(sim %in% d_trt_dec_a$sim), .SD[.N], keyby = .(sim)][
    , .(sim, ia, decision = "-")
  ]
  d_trt_dec <- rbind(d_trt_dec_a, d_trt_dec_b)[order(sim, ia)]
  
  # merge decision in with the total sample size by arm for the randomised 
  # comparison when the decision was made
  d_trt_dec <- base::merge(d_n_trt, d_trt_dec, by = c("sim", "ia"))
  setkey(d_trt_dec, sim, ia, trt)
  
  
  d_trt_dec[, `:=`(
    scenario = i, desc = l_cfg$desc, rd_trt = rd_trt
  )]
  
  d_N_by_rand <- rbind(d_N_by_rand, d_trt_dec)

}
```


```{r, eval = T}
#| echo: FALSE
#| label: tbl-n-at-trigger
#| tbl-cap: 'Expected number of participants by treatment group for each scenario'
#| tbl-pos: H

d_tbl_1_cur <- d_N_by_rand[
  , .(N_mu = mean(N), pct = .N/N_sims), 
  keyby = .(scenario, desc, decision, trt, rd_trt)]


d_tbl_1_cur[, desc := sprintf("%s (RD = %.3f)", desc, rd_trt)]

d_tbl_1_cur <- dcast(
  d_tbl_1_cur, 
  scenario + desc + decision + pct ~ trt , 
  value.var = list("N_mu"))

d_tbl_1_cur[, decision := factor(
  decision, 
  levels = c("sup", "fut", "-"),
  labels = c("superiority", "futility", "no decision"))]

d_tbl_1_cur <- d_tbl_1_cur[order(scenario, decision)]
d_tbl_1_cur <- d_tbl_1_cur[, .SD, .SDcols = !c("scenario")]

setnames(d_tbl_1_cur, old = paste0(1:2), new = paste0("N_", 1:2))

g_tbl <- d_tbl_1_cur |> 
  gt(groupname_col = "desc")  |>
  fmt_number(
    columns = c("N_1", "N_2"),
    decimals = 0, drop_trailing_zeros = TRUE) |>
  fmt_number(
    columns = c("pct"),
    decimals = 2, drop_trailing_zeros = TRUE) |> 
  cols_width(
    starts_with("decision") ~ pct(30),
    starts_with("pct") ~ pct(20),
    starts_with("N_") ~ pct(25)
  ) |>
  cols_align(
    columns = c("decision"),
    align = "left"
  ) |>
  cols_align(
    columns = c("pct"),
    align = "center"
  )  |>
  cols_label(
    decision = "Decision",
    pct = "Proportion of trials",
    N_1 = "SOC", N_2 = "Trt"
  ) |>
  tab_options(
    table.width = pct(80),
    table.font.size = pct(65)
  ) 


g_tbl
```





{{< pagebreak >}}
## Parameter estimation

@tbl-post-rd and @fig-expected-rd show the expected value of the posterior means (and 95% interval) for the treatment effects by scenario.

```{r, echo = F, eval = T}
#| label: post-means
#| code-summary: Distributions of posterior means (unconditional)

# Distribution of posterior means for parameters of interest.

# Some simulated trials will have stopped prior to the maximum sample size and
# these will have NA for their posterior means. If you were to summarise these 
# posterior means, they would be conditional on the trial having 'survived' 
# until the relevant interim. This means that you have missing data at later 
# interims, which creates a selection bias in that your selection of sims at any
# given interim are not a random sample, but rather a sample conditioned on the 
# stopping rules. 

# If you do not account for this in some way then a summary can be either 
# optimistic or pessimistic depending on how the stopping rules interact 
# with the data. Here we try to account for this missingness by imputing the 
# missing posterior means with locf within each simulation.
# Note that this is really only a partial 'fix' to get a sense of whether 
# our estimates is representative of the parameter values we used to simulate
# the data.

i <- 1
d_post_1 <- data.table()

for(i in 1:length(l)){
  
  # config for scenario
  l_cfg <- copy(l[[i]]$cfg)
  
  b_trt <- unlist(l_cfg$btrt)
  rd_trt <- b_trt[2] - b_trt[1]
  # params
  d_pars <- copy(l[[i]]$d_post_smry_1)
  d_pars <- d_pars[par %in% c("rd")]
  
  # interim looks
  d_N <- data.table(ia = seq_along(l_cfg$N_pt), N = cumsum(l_cfg$N_pt))
  
  # observed trial data sets
  # d_all <- copy(l[[i]]$d_all)
  
  d_pars <- dcast(d_pars, sim + ia ~ par, value.var = c("mu", "se"))
  
  # locf
  d_pars[, `:=`(mu_rd = nafill(mu_rd, type = "locf"),
                se_rd = nafill(se_rd, type = "locf")
                ), 
         keyby = .(sim)]
  #
  
  d_pars <- base::merge(d_pars, d_N, by = "ia")
  
  d_post_1 <- rbind(
    d_post_1,
    cbind(
      scenario = i, desc = sprintf("%s (RD = %.3f)", l_cfg$desc, rd_trt),
      d_pars[, .(ia, sim, N, mu_rd, se_rd)]
      )
  )

}

```

```{r, eval = T}
#| echo: FALSE
#| label: tbl-post-rd
#| tbl-cap: 'Parameter estimation - risk difference (expectation of posterior means and 95% interval)'
#| tbl-pos: H

d_tbl_1_cur <- d_post_1[,
                 .(rd = mean(mu_rd),
                   q_025 = quantile(mu_rd, prob = 0.025),
                   q_975 = quantile(mu_rd, prob = 0.975)), 
                 keyby = .(scenario, desc, ia, N)]
# setorderv(d_fig, cols = "scenario", order = -1L)
d_tbl_1_cur[, desc := factor(desc, levels = unique(d_post_1$desc))]


d_tbl_1_cur <- dcast(d_tbl_1_cur, scenario + desc ~ N, value.var = list("rd", "q_025", "q_975"))

ci_names <- function(x = 500){
  paste0(c("rd_","q_025_", "q_975_"), x)
}
setcolorder(
  d_tbl_1_cur, 
  c("scenario", "desc",  
    ci_names(400), ci_names(600), ci_names(800), ci_names(1000)))

d_tbl_1_cur <- d_tbl_1_cur[, .SD, .SDcols = !c("scenario")]


g_tbl <- d_tbl_1_cur |>
  gt(groupname_col = "desc")  |>
  cols_align(
    columns = 1:2,
    align = "left"
  ) |>
  cols_align(
    columns = 2:ncol(d_tbl_1_cur),
    align = "right"
  )   |> 
  cols_merge(
    columns = c("rd_400", "q_025_400", "q_975_400"),
    pattern = "<<{1}>><< ({2}, {3})>>"
  )  |> 
  cols_merge(
    columns = c("rd_600", "q_025_600", "q_975_600"),
    pattern = "<<{1}>><< ({2}, {3})>>"
  )  |> 
  cols_merge(
    columns = c("rd_800", "q_025_800", "q_975_800"),
    pattern = "<<{1}>><< ({2}, {3})>>"
  )  |> 
  cols_merge(
    columns = c("rd_1000", "q_025_1000", "q_975_1000"),
    pattern = "<<{1}>><< ({2}, {3})>>"
  )  |>
  cols_label(
    rd_400 = "400",
    rd_600 = "600",
    rd_800 = "800",
    rd_1000 = "1000"
  )  |>
  tab_spanner(
    label = html("Risk difference (expectation of posterior means and 95 pct interval)"),
    columns = 2:ncol(d_tbl_1_cur)
    ) |>
  tab_options(
    table.font.size = pct(65),
    latex.use_longtable = TRUE,
    latex.header_repeat = TRUE 
    ) |>
   fmt_number(decimals = 3, drop_trailing_zeros = TRUE)

g_tbl

```

```{r, eval = T, echo = F}
#| label: fig-expected-rd
#| fig-cap: 'Distribution of posterior means for risk difference treatment effects by interim and  simulation scenario'
#| fig-height: 8
#| fig-width: 7
#| fig-pos: H

d_fig <- copy(d_post_1)
d_fig[, desc := factor(desc, levels = unique(d_fig$desc))]
d_fig[, N := factor(N)]


ggplot(data = d_fig, aes(x = N, y = mu_rd)) +
  geom_boxplot(outlier.size = 0.1, lwd = 0.3) +
  ggh4x::facet_grid2(desc ~ . , 
             labeller = labeller(desc = label_wrap_gen(35)), 
             scales = "free",
             axes = "y",
             independent = "y")  +
  scale_x_discrete("") +
  scale_y_continuous("Risk difference", breaks = seq(-0.1, 0.05, by = 0.01)) +
  theme_bw() +
  theme(text = element_text(size = 6),
        strip.text.y.right = element_text(angle = 0,
                                      hjust = 0,
                                      vjust = 0.2,
                                      size = 6),
        strip.text.x = element_text(angle = 0, size = 6),
        axis.ticks = element_blank(),
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 6),
        axis.text.y = element_text(size = 6),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "grey",
                                  linewidth = 0.1,
                                  linetype = 1))


```

## Observed proportion with treatment success

@fig-empirical-risk shows the observed proportion with treatment success by scenario, strata and treatment arm with the true underlying proportions shown with crosses (also see @fig-strata-risk).

```{r, echo = F, eval = T}
#| label: empirical-risk
#| code-summary: Summaries of empirical probability of treatment success

i <- 1
d_prop_success <- data.table()

for(i in 1:length(l)){
  
  # extract the decision matrix - sim, analysis, quantity, domain level decision
  d_dec_1 <- copy(l[[i]]$d_decision)
  # config for scenario
  l_cfg <- copy(l[[i]]$cfg)
  
  b_trt <- unlist(l_cfg$btrt)
  rd_trt = b_trt[2] - b_trt[1]
  # interim looks
  d_enrolment <- data.table(ia = seq_along(l_cfg$N_pt), N_enrol = cumsum(l_cfg$N_pt))
  # observed data
  d_all <- copy(l[[i]]$d_all)
  d_all <- base::merge(d_all, d_enrolment , by = "ia")
  
  
  d_N <- data.table(ia = seq_along(l_cfg$N_pt), N = cumsum(l_cfg$N_pt))
  
  # First instance of any decision rule being hit by sim and domain.
  
  # Domains 1, 3 and 4 will stop for superiority or futility for superiority.
  # Domaain 2 will stop for NI or futility for NI.
  
  # Sometimes a decision rule will not be hit for a domain and it will continue
  # to the max sample size. We will deal with that in a minute.
  d_dec_stop <- d_dec_1[
    value == T & quant %in% c("sup", "fut"), 
    .SD[1], keyby = .(sim)]
  d_dec_stop <- base::merge(d_dec_stop, d_N, by = "ia")
  setnames(d_dec_stop, "N", "N_stopped")
  setnames(d_dec_stop, "value", "stopped_early")
  
  # Add in any rows for which no early stopping happened
  d_dec_stop <- base::merge(
    d_dec_stop[, .SD, .SDcols = !c("ia")], 
    # all combinations of sim
    unique(d_dec_1[, .(sim)]),
    by = c("sim"), all.y = T)
  # If domain or trial not stopped then record as having run to the 
  # maximum sample size with no decision made.
  d_dec_stop[is.na(N_stopped), N_stopped := max(d_N$N)]
  d_dec_stop[is.na(stopped_early), stopped_early := F]
  # So now we know where every domain was stopped and the reason for stopping
  # within each sim. Great.
  d_dec_stop[is.na(quant), quant := "no decision"]
  
  
  d_all <- base::merge(
    d_all, 
    d_dec_stop,
    by = "sim"
  )
  d_all <- d_all[N_enrol <= N_stopped]
  d_all <- d_all[, .(y = sum(y), N = sum(N)), keyby = .(reg, loc, trt)]
  d_all[, p_obs := y / N]
  
  d_prop_success <- rbind(
    d_prop_success, 
    cbind(
      scenario = i, 
      desc = sprintf("%s (RD = %.3f)", l_cfg$desc, rd_trt), 
      d_all
      )
  )
  
}



```


```{r, eval = T, echo = F}
#| label: fig-empirical-risk
#| fig-cap: 'Observed proportion with treatment success'
#| fig-height: 6
#| fig-width: 6
#| fig-pos: H


d_fig_1 <- copy(d_prop_success)
d_fig_1[, trt := factor(trt, levels = 1:2, labels = c("Soc", "Trt"))]
d_fig_1[, reg := factor(reg, levels = 1:2, labels = c("Alice", "Darwin"))]
d_fig_1[, loc := factor(loc, levels = 1:2, labels = c("Urban", "Remote"))]
setnames(d_fig_1, old = "scenario", new = "id")

d_fig_2 <- copy(d_grid_all)
d_fig_2[, trt := factor(trt, levels = 1:2, labels = c("Soc", "Trt"))]
d_fig_2[, desc := sprintf("%s (RD = %.3f)", desc, rd_trt)]
d_fig_2[, reg := factor(reg, levels = 1:2, labels = c("Alice", "Darwin"))]
d_fig_2[, loc := factor(loc, levels = 1:2, labels = c("Urban", "Remote"))]

d_fig <- base::merge(
  d_fig_1,
  d_fig_2[, .(id, reg, loc, trt, p)],
  by = c("id", "reg", "loc", "trt")
)

ggplot(d_fig, aes(x = trt, y = p_obs)) +
  geom_col(width = 0.1, fill = "grey") +
  geom_point(aes(y = p), size = 3, pch = 3) +
  geom_hline(aes(yintercept = p_obs, lty = trt), lwd = 0.2) +
  # scale_color_discrete("") +
  scale_linetype_discrete("") +
  # scale_color_manual("", values = c("black", "red")) +
  scale_x_discrete("") +
  scale_y_continuous("Pr(RSV-LRI)", breaks = seq(0, 3, by = 0.05)) + 
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.box="horizontal",
    strip.text.y.right = element_text(angle = 0,
                                      hjust = 0,
                                      vjust = 0.2,
                                      size = 7),
    axis.ticks = element_blank(),
    strip.text.x.top = element_text(size = 7),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "grey",
                                  linewidth = 0.1,
                                  linetype = 1),
    axis.title.y=element_text(size = 7),
    axis.text.y = element_text(size = 7),
    axis.text.x = element_text(size = 7),
    axis.title.x = element_text(size = 7),
    legend.text = element_text(size = 7)
  ) +
  facet_grid2(
    desc ~ reg + loc, 
    axes = "y",
    labeller = label_wrap_gen(20)) 
```


{{< pagebreak >}}
# Repository status {.unlisted .unnumbered}

\footnotesize
```{r}
#| echo: false
repo <- repository(path = ".")
summary(repo)
```
\normalsize


{{< pagebreak >}}
## References

<!-- Needs to have a citation for this to work otherwise you will get the old \end{CSLReferences} error  -->


